"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[866],{5680:(t,e,n)=>{n.d(e,{xA:()=>g,yg:()=>d});var i=n(6540);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,i,o=function(t,e){if(null==t)return{};var n,i,o={},a=Object.keys(t);for(i=0;i<a.length;i++)n=a[i],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(i=0;i<a.length;i++)n=a[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=i.createContext({}),c=function(t){var e=i.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},g=function(t){var e=c(t.components);return i.createElement(s.Provider,{value:e},t.children)},p="mdxType",f={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},u=i.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,s=t.parentName,g=l(t,["components","mdxType","originalType","parentName"]),p=c(n),u=o,d=p["".concat(s,".").concat(u)]||p[u]||f[u]||a;return n?i.createElement(d,r(r({ref:e},g),{},{components:n})):i.createElement(d,r({ref:e},g))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,r=new Array(a);r[0]=u;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[p]="string"==typeof t?t:o,r[1]=l;for(var c=2;c<a;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5235:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(9668),o=(n(6540),n(5680));const a={sidebar_position:1},r="\u2699\ufe0f Global notifications settings",l={unversionedId:"intro/comprehensive-configuration/global-notifications-settings",id:"intro/comprehensive-configuration/global-notifications-settings",title:"\u2699\ufe0f Global notifications settings",description:"The react-native-notificated library gives you a lot of possibilities to change the default configuration.",source:"@site/docs/intro/comprehensive-configuration/global-notifications-settings.md",sourceDirName:"intro/comprehensive-configuration",slug:"/intro/comprehensive-configuration/global-notifications-settings",permalink:"/react-native-notificated/docs/intro/comprehensive-configuration/global-notifications-settings",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"intro",previous:{title:"\ud83d\udee0 Basic configuration",permalink:"/react-native-notificated/docs/intro/basics/basic-configuration"},next:{title:"\u270f\ufe0f Order of overwriting settings",permalink:"/react-native-notificated/docs/intro/comprehensive-configuration/order-of-settings-overwriting"}},s={},c=[{value:"Notch handling",id:"notch-handling",level:2}],g={toc:c};function p(t){let{components:e,...n}=t;return(0,o.yg)("wrapper",(0,i.A)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"\ufe0f-global-notifications-settings"},"\u2699\ufe0f Global notifications settings"),(0,o.yg)("br",null),(0,o.yg)("p",null,"The react-native-notificated library gives you a lot of possibilities to change the default configuration."),(0,o.yg)("p",null,"In the beginning, you can set the configuration for all the notifications used in the app."),(0,o.yg)("p",null,"Let's take a look at what exactly can we set globally:"),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"Name"),(0,o.yg)("th",{parentName:"tr",align:"center"},"Type"),(0,o.yg)("th",{parentName:"tr",align:"center"},"Default"),(0,o.yg)("th",{parentName:"tr",align:null},"Description"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"duration"),(0,o.yg)("td",{parentName:"tr",align:"center"},"Number"),(0,o.yg)("td",{parentName:"tr",align:"center"},"3000"),(0,o.yg)("td",{parentName:"tr",align:null},"Use this property to set how long the notifications should be displayed on the screen. Value expressed in milliseconds.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"notificationPosition"),(0,o.yg)("td",{parentName:"tr",align:"center"},"'top' / 'top-right' / 'top-left' / 'center' / 'bottom' / 'bottom-right' / 'bottom-left'"),(0,o.yg)("td",{parentName:"tr",align:"center"},"'top'"),(0,o.yg)("td",{parentName:"tr",align:null},"Set where the notifications should appear on the screen. You can choose one of seven default options: top / top-right / top-left / center / bottom / bottom-right / bottom-left. To read more about the notification position please go to the ",(0,o.yg)("a",{parentName:"td",href:"../default-variants-config/position"},"NOTIFICATION POSITION")," section.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"notificationWidth"),(0,o.yg)("td",{parentName:"tr",align:"center"},"Number"),(0,o.yg)("td",{parentName:"tr",align:"center"},"343"),(0,o.yg)("td",{parentName:"tr",align:null},"Use this property to set the width, in pixels, of the notifications that will be displayed on the screen.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"animationConfig"),(0,o.yg)("td",{parentName:"tr",align:"center"},"Object"),(0,o.yg)("td",{parentName:"tr",align:"center"},"SlideInLeftSlideOutRight"),(0,o.yg)("td",{parentName:"tr",align:null},"Property responsible for the notification animation. You can set one of the animations prepared by us, or make your own config. To read more about the animation settings please go to the ",(0,o.yg)("a",{parentName:"td",href:"../animations/changing-transitions"},"ANIMATIONS SETTINGS")," section.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"isNotch"),(0,o.yg)("td",{parentName:"tr",align:"center"},"Boolean"),(0,o.yg)("td",{parentName:"tr",align:"center"},"false"),(0,o.yg)("td",{parentName:"tr",align:null},"Property responsible for read if the device has notch. You can use one of the libraries (for example 'react-native-device-info') to read if the specific device has Notch and pass the value here.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"gestureConfig"),(0,o.yg)("td",{parentName:"tr",align:"center"},"Object"),(0,o.yg)("td",{parentName:"tr",align:"center"},"iOS: 'y' / android: 'x'"),(0,o.yg)("td",{parentName:"tr",align:null},"Object responsible for setting gesture direction that triggers swipe-dismiss of notification. To read more about gesture config, please go to the ",(0,o.yg)("a",{parentName:"td",href:"../default-variants-config/props-config"},"GESTURE CONFIG")," section.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"defaultStylesSettings"),(0,o.yg)("td",{parentName:"tr",align:"center"},"Object"),(0,o.yg)("td",{parentName:"tr",align:"center"},"-"),(0,o.yg)("td",{parentName:"tr",align:null},"Object responsible for setting global styles for the notifications. You can also set here styles, for all the notifications of the specific type. For example for the error notifications. To read more about global style settings please go to the ",(0,o.yg)("a",{parentName:"td",href:"../default-variants-config/global-config"},"GLOBAL STYLES SETTINGS")," section.")))),(0,o.yg)("br",null),(0,o.yg)("p",null,"Here we can see the global notifications settings in their basic form with default settings: ",(0,o.yg)("br",null)),(0,o.yg)("br",null),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx"},"const { useNotifications, NotificationsProvider } = createNotifications({\n  duration: 300,\n  notificationPosition: 'top',\n  animationConfig: SlideInLeftSlideOutRight,\n  isNotch: undefined,\n  defaultStylesSettings: {},\n  gestureConfig: { direction: 'y' },\n})\n")),(0,o.yg)("h2",{id:"notch-handling"},"Notch handling"),(0,o.yg)("p",null,"The library handles notch detection automatically so you don't have to worry about configuring this on your side. However, if you wish to take control over this by yourself, you can do that by declaring ",(0,o.yg)("inlineCode",{parentName:"p"},"isNotch")," property in the global config."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx"},"const { useNotifications, NotificationsProvider } = createNotifications({\n  ...\n  isNotch: true,\n})\n")),(0,o.yg)("p",null,"Feel free to use for example ",(0,o.yg)("inlineCode",{parentName:"p"},"react-native-device-info"),"."))}p.isMDXComponent=!0}}]);