"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[445],{5680:(n,e,t)=>{t.d(e,{xA:()=>g,yg:()=>y});var i=t(6540);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,i,a=function(n,e){if(null==n)return{};var t,i,a={},o=Object.keys(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=i.createContext({}),p=function(n){var e=i.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},g=function(n){var e=p(n.components);return i.createElement(l.Provider,{value:e},n.children)},m="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},c=i.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,l=n.parentName,g=s(n,["components","mdxType","originalType","parentName"]),m=p(t),c=a,y=m["".concat(l,".").concat(c)]||m[c]||u[c]||o;return t?i.createElement(y,r(r({ref:e},g),{},{components:t})):i.createElement(y,r({ref:e},g))}));function y(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,r=new Array(o);r[0]=c;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s[m]="string"==typeof n?n:a,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6717:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var i=t(9668),a=(t(6540),t(5680));const o={sidebar_position:2},r="\ud83d\udcab Custom transitions",s={unversionedId:"intro/animations/custom-transitions",id:"intro/animations/custom-transitions",title:"\ud83d\udcab Custom transitions",description:"\ud83d\udc69\ud83c\udffd\u200dHow the animations work under the hood",source:"@site/docs/intro/animations/custom-transitions.md",sourceDirName:"intro/animations",slug:"/intro/animations/custom-transitions",permalink:"/react-native-notificated/docs/intro/animations/custom-transitions",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"intro",previous:{title:"\ud83d\udd04 Transitions",permalink:"/react-native-notificated/docs/intro/animations/changing-transitions"},next:{title:"\ud83d\udd27 Specifying default types",permalink:"/react-native-notificated/docs/intro/types/custom-components-examples"}},l={},p=[{value:"\ud83d\udc69\ud83c\udffd\u200dHow the animations work under the hood",id:"how-the-animations-work-under-the-hood",level:3},{value:"Generating transition config with <code>AnimationBuilder</code>",id:"generating-transition-config-with-animationbuilder",level:3},{value:"Generating transition config with <code>generateAnimationConfig</code>",id:"generating-transition-config-with-generateanimationconfig",level:3},{value:"<code>animationConfigIn</code> and <code>animationConfigOut</code>",id:"animationconfigin-and-animationconfigout",level:3},{value:"<code>transitionInStyles</code> and <code>transitionOutStyles</code>",id:"transitioninstyles-and-transitionoutstyles",level:3}],g={toc:p};function m(n){let{components:e,...t}=n;return(0,a.yg)("wrapper",(0,i.A)({},g,t,{components:e,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"-custom-transitions"},"\ud83d\udcab Custom transitions"),(0,a.yg)("h3",{id:"how-the-animations-work-under-the-hood"},"\ud83d\udc69\ud83c\udffd\u200dHow the animations work under the hood"),(0,a.yg)("p",null,"Our library is dependent on the ",(0,a.yg)("inlineCode",{parentName:"p"},"react-native-reanimated")," (v2) which we use to animate the wrapper around the notification components."),(0,a.yg)("p",null,"To understand the ins and outs of animations, you can also take a look at the documentation for the aforementioned ",(0,a.yg)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/"},"React Native Reanimated")),(0,a.yg)("p",null,"Our animation system is designed to recognize two kinds of transitions:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"transition in")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"transition out"))),(0,a.yg)("p",null,"and it is based on one animated value (shared value) that represents these transitions and animates itself from ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"1"),"."),(0,a.yg)("p",null,"Its range should be self-explanatory, ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," represents the beginning of the ",(0,a.yg)("strong",{parentName:"p"},"transition in")," animation, whereas ",(0,a.yg)("inlineCode",{parentName:"p"},"1")," stands for the starting point for the ",(0,a.yg)("strong",{parentName:"p"},"transition out")," kind of animation."),(0,a.yg)("p",null,"When the notification is about to show up, the value is animated from ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"1"),". When the notification is about to dissapear, it goes from ",(0,a.yg)("inlineCode",{parentName:"p"},"1")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"0"),"."),(0,a.yg)("p",null,"Every time a notification is about to be shown, the library renders the UI part wrapped with an ",(0,a.yg)("inlineCode",{parentName:"p"},"<Animated.View />")," and applies ",(0,a.yg)("strong",{parentName:"p"},"animated styles")," to it so it knows how it should animate."),(0,a.yg)("p",null,"The source of these styles comes from the ",(0,a.yg)("strong",{parentName:"p"},"animation config")," that is generated with ",(0,a.yg)("inlineCode",{parentName:"p"},"AnimationBuilder")," class or ",(0,a.yg)("inlineCode",{parentName:"p"},"generateAnimationConfig")," function and is used internally by the library to generate the animations. You can also use it yourself to create whatever transition you desiere."),(0,a.yg)("p",null,"Summarizing, there are ",(0,a.yg)("em",{parentName:"p"},"4 properties")," that can controll the transition. They all are handled by ",(0,a.yg)("inlineCode",{parentName:"p"},"AnimationBuilder")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"generateAnimationConfig")," and go as follows:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"animationConfigIn")," - spring / timing configuration for transition in. ",(0,a.yg)("strong",{parentName:"li"},"REQUIRED")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"animationConfigOut")," - spring / timing configuration for transition out. ",(0,a.yg)("strong",{parentName:"li"},"Not required"),", fallbacks to ",(0,a.yg)("inlineCode",{parentName:"li"},"animationConfigIn")," when not provided"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"transitionInStyles")," - a ",(0,a.yg)("em",{parentName:"li"},"worklet")," function that takes in the animated ",(0,a.yg)("strong",{parentName:"li"},"progress")," value. It has to return the animated styles. For ",(0,a.yg)("strong",{parentName:"li"},"transition in")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"transitionOutStyles")," - same as above but for transition out. Not required, fallbacks to ^")),(0,a.yg)("p",null,"The return type of this function (",(0,a.yg)("inlineCode",{parentName:"p"},"generateAnimationConfig"),") is ",(0,a.yg)("inlineCode",{parentName:"p"},"CustomAnimationConfig")," which you can then use when changing the animation types in, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"createNotification")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"notify")," call."),(0,a.yg)("h3",{id:"generating-transition-config-with-animationbuilder"},"Generating transition config with ",(0,a.yg)("inlineCode",{parentName:"h3"},"AnimationBuilder")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"AnimationBuilder")," takes in a config object as a property with which you can define the animation."),(0,a.yg)("p",null,"Below code snippets should give an idea how it works:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 1")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"export const MoveDown = new AnimationBuilder({\n  animationConfigIn: {\n    type: 'timing',\n    config: {\n      duration: 400,\n    },\n  },\n  transitionInStyles: (progress) => {\n    'worklet'\n    const translateY = interpolate(progress.value, [0, 1], [-100, 0])\n    return {\n      opacity: progress.value,\n      transform: [{ translateY }],\n    }\n  },\n  transitionOutStyles: (progress) => {\n    'worklet'\n    const translateY = interpolate(progress.value, [0, 1], [100, 0])\n    return {\n      opacity: progress.value,\n      transform: [{ translateY }],\n    }\n  },\n})\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 2")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"export const RotateIn = generateAnimationConfig({\n  animationConfigIn: {\n    type: 'timing',\n    config: {\n      duration: 700,\n      easing: Easing.out(Easing.exp),\n    },\n  },\n  transitionInStyles: (progress) => {\n    'worklet'\n\n    const rotate = interpolate(progress.value, [0, 1], [-360, 0])\n\n    return {\n      transform: [{ rotate: `${rotate}deg` }, { scale: progress.value }],\n      opacity: progress.value,\n    }\n  },\n})\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 3")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"export const MoveDownRotateIn = MoveDown.add(RotateIn)\n")),(0,a.yg)("h3",{id:"generating-transition-config-with-generateanimationconfig"},"Generating transition config with ",(0,a.yg)("inlineCode",{parentName:"h3"},"generateAnimationConfig")),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"generateAnimation config is ",(0,a.yg)("inlineCode",{parentName:"p"},"deprecated"),". Please use Animation builder which allows your animations to be more customizable.")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"generateAnimationConfig")," takes in a config object as a property with which you can define the animation."),(0,a.yg)("p",null,"The code snippets below should give an idea how it works:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 1")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"export const Example1 = generateAnimationConfig({\n  animationConfigIn: {\n    type: 'timing',\n    config: {\n      duration: 400,\n      easing: Easing.inOut(Easing.sin),\n    },\n  },\n  transitionInStyles: (progress) => {\n    'worklet'\n\n    const scale = interpolate(progress.value, [0, 1], [0.8, 1])\n    const translateY = interpolate(progress.value, [0, 1], [-100, 0])\n\n    return {\n      opacity: progress.value,\n      transform: [{ scale }, { translateY }],\n    }\n  },\n})\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example 2")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"export const Example2 = generateAnimationConfig({\n  animationConfigIn: {\n    type: 'timing',\n    config: {\n      duration: 300,\n    },\n  },\n  animationConfigOut: {\n    type: 'spring',\n    config: {\n      damping: 4,\n      mass: 0.8,\n    },\n  },\n  transitionInStyles: (progress) => {\n    'worklet'\n\n    const scale = interpolate(progress.value, [0, 1], [0.8, 1])\n    const translateY = interpolate(progress.value, [0, 1], [-100, 0])\n\n    return {\n      opacity: progress.value,\n      transform: [{ scale }, { translateY }],\n    }\n  },\n  transitionOutStyles: (progress) => {\n    'worklet'\n\n    const scale = interpolate(progress.value, [0, 1], [0.8, 1])\n    const translateY = interpolate(progress.value, [0, 1], [100, 0])\n\n    return {\n      opacity: progress.value,\n      transform: [{ scale }, { translateY }],\n    }\n  },\n})\n")),(0,a.yg)("p",null,"As you can see in the above examples, you have full control over the styles and animation configs for both kind of transitions - ",(0,a.yg)("strong",{parentName:"p"},"in")," and ",(0,a.yg)("strong",{parentName:"p"},"out"),"."),(0,a.yg)("h3",{id:"animationconfigin-and-animationconfigout"},(0,a.yg)("inlineCode",{parentName:"h3"},"animationConfigIn")," and ",(0,a.yg)("inlineCode",{parentName:"h3"},"animationConfigOut")),(0,a.yg)("p",null,"The type of\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"animationConfigIn")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"animationConfigOut"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'{\n  type: "timing" | "spring",\n  config: WithSpringConfig | WithTimingConfig // -> Reanimated type declarations\n}\n')),(0,a.yg)("h3",{id:"transitioninstyles-and-transitionoutstyles"},(0,a.yg)("inlineCode",{parentName:"h3"},"transitionInStyles")," and ",(0,a.yg)("inlineCode",{parentName:"h3"},"transitionOutStyles")),(0,a.yg)("p",null,"The type of\xa0",(0,a.yg)("inlineCode",{parentName:"p"},"transitionInStyles")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"transitionOutStyles")," is the\nfollowing function (must be a ",(0,a.yg)("inlineCode",{parentName:"p"},"worklet"),"):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"type TransistionStylesConfigFunction = (progress: SharedValue<number>) => AnimatedStylesType\n")))}m.isMDXComponent=!0}}]);