"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[57],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var o=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),m=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=m(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=m(t),d=a,g=p["".concat(l,".").concat(d)]||p[d]||u[d]||i;return t?o.createElement(g,r(r({ref:n},c),{},{components:t})):o.createElement(g,r({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:a,r[1]=s;for(var m=2;m<i;m++)r[m]=t[m];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3057:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var o=t(9668),a=(t(6540),t(5680));const i={sidebar_position:6},r="\u270d\ufe0f Custom components examples",s={unversionedId:"intro/examples/custom-components-examples",id:"intro/examples/custom-components-examples",title:"\u270d\ufe0f Custom components examples",description:"Code has been already described step by step in the DEFAULT EXAMPLES section.",source:"@site/docs/intro/examples/custom-components-examples.md",sourceDirName:"intro/examples",slug:"/intro/examples/custom-components-examples",permalink:"/react-native-notificated/docs/intro/examples/custom-components-examples",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"intro",previous:{title:"\ud83e\udded Custom examples",permalink:"/react-native-notificated/docs/intro/examples/custom-examples"},next:{title:"\ud83d\udd25 Redux example",permalink:"/react-native-notificated/docs/intro/examples/redux-example"}},l={},m=[{value:"Custom modal - advertisement",id:"custom-modal---advertisement",level:2},{value:"Custom modal - info",id:"custom-modal---info",level:2},{value:"Styles for both custom modals",id:"styles-for-both-custom-modals",level:2},{value:"Main component",id:"main-component",level:2},{value:"Implement close button",id:"implement-close-button",level:3},{value:"Advertisement",id:"advertisement",level:3},{value:"Custom info",id:"custom-info",level:3}],c={toc:m};function p(e){let{components:n,...i}=e;return(0,a.yg)("wrapper",(0,o.A)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\ufe0f-custom-components-examples"},"\u270d\ufe0f Custom components examples"),(0,a.yg)("br",null),(0,a.yg)("p",null,"Code has been already described step by step in the ",(0,a.yg)("a",{parentName:"p",href:"/react-native-notificated/docs/intro/examples/default-examples"},"DEFAULT EXAMPLES")," section.",(0,a.yg)("br",null),"\nSo I think there is no need to do it here again.",(0,a.yg)("br",null)),(0,a.yg)("p",null,"In custom components examples, we will create our own modal, and pass it to the library.",(0,a.yg)("br",null),"\nThanks to this, we will obtain the maximum possibility of customization, without losing library advantages."),(0,a.yg)("p",null,"Let's create our custom components:"),(0,a.yg)("h2",{id:"custom-modal---advertisement"},"Custom modal - advertisement"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react'\nimport { Image, Text, View } from 'react-native'\nimport { styles } from './styles'\n\ntype Props = {\n  customTitle: string\n  customDescription: string\n}\n\nexport const Advertisement = ({ customTitle, customDescription }: Props) => {\n  return (\n    <View style={styles.advertisement_container}>\n      <Text style={styles.advertisement_title}>{customTitle}</Text>\n      <Image source={require('../../../../assets/doughnut.png')} style={styles.advertisement_image} />\n      <Text style={styles.advertisement_description}>{customDescription}</Text>\n    </View>\n  )\n}\n\n")),(0,a.yg)("h2",{id:"custom-modal---info"},"Custom modal - info"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Image, Text, View } from 'react-native'\nimport React from 'react'\nimport { styles } from './styles'\n\ntype Props = {\n  customTitle: string\n}\n\nexport const CustomInfo = ({ customTitle }: Props) => {\n  return (\n    <View style={styles.info_container}>\n      <Text style={styles.info_title}>{customTitle}</Text>\n      <Image source={require('../../../../assets/in_progress.png')} style={styles.info_image} />\n    </View>\n  )\n}\n\n")),(0,a.yg)("h2",{id:"styles-for-both-custom-modals"},"Styles for both custom modals"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { StyleSheet } from 'react-native'\n\nexport const styles = StyleSheet.create({\n  advertisement_container: {\n    flex: 1,\n    backgroundColor: '#f0fffe',\n    borderRadius: 20,\n    borderWidth: 2,\n    borderColor: '#DCAE96',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 30,\n  },\n  advertisement_title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  advertisement_description: {\n    fontSize: 15,\n    textAlign: 'center',\n  },\n  advertisement_image: {\n    resizeMode: 'center',\n    height: 230,\n  },\n  info_container: {\n    width: 360,\n    height: 360,\n    borderRadius: 180,\n    backgroundColor: '#FFFFFF',\n    borderWidth: 10,\n    borderColor: '#000000',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 30,\n  },\n  info_title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n  },\n  info_image: {\n    width: 150,\n    height: 150,\n  },\n})\n\n")),(0,a.yg)("br",null),(0,a.yg)("p",null,"As you can see they're just very simple modals. ",(0,a.yg)("br",null),"\nWhat we need to do next is to pass those modals to the library structure.",(0,a.yg)("br",null),"\nPlease notice, that we pass props to those components. I will explain how to do it in the main component below."),(0,a.yg)("h2",{id:"main-component"},"Main component"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react'\nimport { SafeAreaView } from 'react-native'\nimport { createNotifications } from 'react-native-notificated'\nimport { styles } from './styles'\nimport { Advertisement } from '../components/customVariants/Advertisement'\nimport { CustomInfo } from '../components/customVariants/CustomInfo'\nimport { CustomCaseButton } from '../components/customVariants/CustomCaseButton'\n\nconst { useNotifications, NotificationsProvider } = createNotifications({\n  variants: {\n    advertisement: {\n      component: Advertisement,\n      config: {\n        notificationPosition: 'top',\n        duration: 5000,\n      },\n    },\n    custom_info: {\n      component: CustomInfo,\n      config: {\n        duration: 2000,\n      },\n    },\n  },\n  isNotch: true,\n})\n\nexport const CustomCaseExamples = () => {\n  const { notify } = useNotifications()\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <NotificationsProvider />\n\n      <CustomCaseButton\n        buttonTitle=\"Advertisement\"\n        onPress={() =>\n          notify('advertisement', {\n            params: {\n              customTitle: 'The best Doughnuts in Krakow',\n              customDescription:\n                'Doughnuts are usually deep fried from a flour dough, but other types of batters can also be used. Various toppings and flavorings are used for different types, such as sugar, chocolate or maple glazing. Doughnuts may also include water, leavening, eggs, milk, sugar, oil, shortening, and natural or artificial flavors.',\n            },\n            config: {\n              duration: 2000,\n            },\n          })\n        }\n      />\n\n      <CustomCaseButton\n        buttonTitle=\"Custom Info\"\n        onPress={() =>\n          notify('custom_info', {\n            params: {\n              customTitle: 'In progress',\n            },\n            config: {\n              duration: 3000,\n            },\n          })\n        }\n      />\n    </SafeAreaView>\n  )\n}\n\n")),(0,a.yg)("br",null),(0,a.yg)("p",null,"The first step is to initialize process using ",(0,a.yg)("inlineCode",{parentName:"p"},"createNotifications"),".",(0,a.yg)("br",null),"\nIn the settings, we can use property ",(0,a.yg)("inlineCode",{parentName:"p"},"variants"),".",(0,a.yg)("br",null),"\nThis is the place where we will pass our components. Let's take a closer look at it:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"const { useNotifications, NotificationsProvider } = createNotifications({\n  variants: {\n    advertisement: {\n      component: Advertisement,\n      config: {\n        notificationPosition: 'top',\n        duration: 5000,\n      },\n    },\n    custom_info: {\n      component: CustomInfo,\n      config: {\n        duration: 2000,\n      },\n    },\n  },\n  isNotch: true,\n})\n\n")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"variants")," is an object with the keys, which are the names of the variants we want to create.",(0,a.yg)("br",null),"\nIn this case, we want to create advertisement, and the custom info, so I decided to use those names literally.",(0,a.yg)("br",null),"\nYou can name your variant whatever you like. It can be 'modal' / 'lol' / 'my_precious_variant' etc. It depends on you. ",(0,a.yg)("br",null)),(0,a.yg)("p",null,"Every custom variant in also an object where we need to pass our custom component, and optionally ",(0,a.yg)("inlineCode",{parentName:"p"},"config"),". ",(0,a.yg)("br",null),"\nLet's recall properties that ",(0,a.yg)("inlineCode",{parentName:"p"},"config")," can take:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Default"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"duration"),(0,a.yg)("td",{parentName:"tr",align:null},"Number"),(0,a.yg)("td",{parentName:"tr",align:null},"3000"),(0,a.yg)("td",{parentName:"tr",align:null},"Use this property to set how long the notifications should be displayed on the screen. Value expressed in milliseconds")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"notificationPosition"),(0,a.yg)("td",{parentName:"tr",align:null},"'top' / 'center' / 'bottom'"),(0,a.yg)("td",{parentName:"tr",align:null},"'top'"),(0,a.yg)("td",{parentName:"tr",align:null},"Set where the notifications should appear on the screen. You can choose one of three default options: top / center / bottom. To read more about the notification position please go to the ",(0,a.yg)("a",{parentName:"td",href:"../default-variants-config/position"},"NOTIFICATION POSITION")," section.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"animationConfig"),(0,a.yg)("td",{parentName:"tr",align:null},"Object"),(0,a.yg)("td",{parentName:"tr",align:null},"SlideInLeftSlideOutRight"),(0,a.yg)("td",{parentName:"tr",align:null},"Property responsible for the notification animation. You can set one of the animations prepared by us, or make your own config. To read more about the animation settings please go to the ",(0,a.yg)("a",{parentName:"td",href:"../animations/changing-transitions"},"ANIMATIONS SETTINGS")," section.")))),(0,a.yg)("br",null),(0,a.yg)("p",null,"Now, our custom modals are 'injected' inside the library, and we can use them, exactly in the same way as we did with default notifications (",(0,a.yg)("inlineCode",{parentName:"p"},"success")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"error")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"info")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"warning"),")."),(0,a.yg)("p",null,"What is important, that when we pass the name of the notification, then instead of the ",(0,a.yg)("inlineCode",{parentName:"p"},"success")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"error")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"info")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"warning")," we used before, now we need to pass name we declared in the ",(0,a.yg)("inlineCode",{parentName:"p"},"variants"),". In my case they are the ",(0,a.yg)("inlineCode",{parentName:"p"},"advertisement")," and the ",(0,a.yg)("inlineCode",{parentName:"p"},"custom_info"),"\nIt's a first argument we pass to the ",(0,a.yg)("inlineCode",{parentName:"p"},"notify"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"<CustomCaseButton\n  buttonTitle=\"Advertisement\"\n  onPress={() =>\n    notify('advertisement', {\n      params: {\n        customTitle: 'The best Doughnuts in Krakow',\n        customDescription:\n          'Doughnuts are usually deep fried from a flour dough, but other types of batters can also be used. Various toppings and flavorings are used for different types, such as sugar, chocolate or maple glazing. Doughnuts may also include water, leavening, eggs, milk, sugar, oil, shortening, and natural or artificial flavors.',\n      },\n      config: {\n        duration: 2000,\n      },\n    })\n  }\n/>\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"<CustomCaseButton\n  buttonTitle=\"Custom Info\"\n  onPress={() =>\n    notify('custom_info', {\n      params: {\n        customTitle: 'In progress',\n      },\n      config: {\n        duration: 3000,\n      },\n    })\n  }\n/>\n")),(0,a.yg)("p",null,"After that we have ",(0,a.yg)("inlineCode",{parentName:"p"},"params"),".",(0,a.yg)("br",null),"\nThey are just literally the props we pass to our custom modal. ",(0,a.yg)("br",null),"\nIn the ",(0,a.yg)("inlineCode",{parentName:"p"},"CustomInfo")," we require only ",(0,a.yg)("inlineCode",{parentName:"p"},"customTitle"),", so we just need to pass this one to the ",(0,a.yg)("inlineCode",{parentName:"p"},"params"),".",(0,a.yg)("br",null)),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"config")," is still have the 3 properties we recall above.\nWe can pass the ",(0,a.yg)("inlineCode",{parentName:"p"},"config")," when we're 'injecting' our custom modal to the library, or when we call it. It depends on you. ",(0,a.yg)("br",null),"\nPlease remember that the ",(0,a.yg)("inlineCode",{parentName:"p"},"config")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"notify")," (when we call it) overwrites ",(0,a.yg)("inlineCode",{parentName:"p"},"config")," that we declared in the 'injection' process.",(0,a.yg)("br",null)),(0,a.yg)("h3",{id:"implement-close-button"},"Implement close button"),(0,a.yg)("p",null,"In case you need to implement close button in your custom component, here is the code showing implementation in out 'CustomInfo' notification:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import { Image, Text, View } from 'react-native'\nimport { TouchableOpacity } from 'react-native-gesture-handler'\nimport React from 'react'\nimport { styles } from './styles'\nimport { useNotificationController } from 'react-native-notificated'\n\ntype Props = {\n  customTitle: string\n}\n\nexport const CustomInfo = ({ customTitle }: Props) => {\n  const { remove } = useNotificationController()\n\n  return (\n    <View style={styles.info_container}>\n      <Text style={styles.info_title}>{customTitle}</Text>\n      <Image source={require('../../../../assets/in_progress.png')} style={styles.info_image} />\n      <TouchableOpacity\n        onPress={() => {\n          remove()\n        }}>\n        <Image source={'../../../../assets/close-regularMode.png'} style={styles.icon} />\n      </TouchableOpacity>\n    </View>\n  )\n}\n\n")),(0,a.yg)("p",null,"There are a few new things along with the previously shown code.\nFirst, we need to add two imports:  a 'TouchableOpacity' from react-native-gesture-handler and 'useNotificationController' hook provided with react-native-notificated.\n'useNotificationController' hook returns method 'remove' which can be applied in our custom notification.\nThe only thing that has to be done to implement the close button is to add a close button in our return part of the component and invoke remove() on the press event."),(0,a.yg)("p",null,"Now let's take a look how our examples looks like:"),(0,a.yg)("h3",{id:"advertisement"},"Advertisement"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Success",src:t(7173).A,width:"742",height:"946"})),(0,a.yg)("h3",{id:"custom-info"},"Custom info"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Error",src:t(4288).A,width:"730",height:"754"})))}p.isMDXComponent=!0},4288:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/custom_info-c995f34a9075f2f5857f847a2e04658a.png"},7173:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/doughnuts-2d879832c2d037ce9a01ad207fd9841a.png"}}]);