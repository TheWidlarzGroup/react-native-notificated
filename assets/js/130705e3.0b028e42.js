"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[981],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>u});var i=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=c(t),m=o,u=g["".concat(s,".").concat(m)]||g[m]||d[m]||a;return t?i.createElement(u,r(r({ref:n},p),{},{components:t})):i.createElement(u,r({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<a;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3800:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=t(9668),o=(t(6540),t(5680));const a={sidebar_position:1,title:"API"},r="\u2699\ufe0f API Reference",l={unversionedId:"api/apiReference",id:"api/apiReference",title:"API",description:"Below you will find a brief description of all the methods and properties that the library exposes.",source:"@site/docs/api/apiReference.md",sourceDirName:"api",slug:"/api/apiReference",permalink:"/react-native-notificated/docs/api/apiReference",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"API"},sidebar:"api",next:{title:"Types",permalink:"/react-native-notificated/docs/api/types"}},s={},c=[{value:"<code>animationConfig</code>",id:"animationconfig",level:3},{value:"<code>createNotifications()</code>",id:"createnotifications",level:3},{value:"<code>generateAnimationConfig()</code>",id:"generateanimationconfig",level:3},{value:"<code>modify()</code>",id:"modify",level:3},{value:"<code>NotificationsProvider</code>",id:"notificationsprovider",level:3},{value:"<code>notify()</code>",id:"notify",level:3},{value:"<code>remove()</code>",id:"remove",level:3},{value:"<code>useNotifications()</code>",id:"usenotifications",level:3},{value:"<code>useNotificationsController()</code>",id:"usenotificationscontroller",level:3}],p={toc:c};function g(e){let{components:n,...t}=e;return(0,o.yg)("wrapper",(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"\ufe0f-api-reference"},"\u2699\ufe0f API Reference"),(0,o.yg)("p",null,"Below you will find a brief description of all the methods and properties that the library exposes.\nAll entries are sorted alphabetically."),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"animationconfig"},(0,o.yg)("inlineCode",{parentName:"h3"},"animationConfig")),(0,o.yg)("p",null,"A parameter used to configure the animation. It can be set up for the entire app or selectively for a particular notification.\nBelow is the global configuration:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"import { createNotifications, RotateInRotateOut } from 'react-native-notificated'\n\nconst { NotificationsProvider } = createNotifications({\n  animationConfig: RotateInRotateOut,\n})\n")),(0,o.yg)("p",null,"It can also be overwritten in the local scope when calling the notification:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"import { SlideInLeftSlideOutRight } from 'react-native-notificated'\n\n[...]\n\nnotify('success', {\n  params: {\n    title: 'Success',\n    description: 'This is where the toast text goes',\n  },\n  config: {\n    animationConfig: SlideInLeftSlideOutRight,\n  },\n})\n")),(0,o.yg)("p",null,"We've prepared a couple of ready-to-use animations for you (just import them from the library):"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"RotateZIn")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ZoomInDownZoomOutUp")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ZoomInDownZoomOutDown")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"RotateInRotateOut")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"SlideInLeftSlideOutRight")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ZoomInZoomOut")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"MoveUp")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"MoveDown")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"SlideInLeft")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"FadeInFadeOut")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"VeryCustomTransition")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"DiagonalSlideInLeftSlideOutRight"))),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"createnotifications"},(0,o.yg)("inlineCode",{parentName:"h3"},"createNotifications()")),(0,o.yg)("p",null,"API used to initialize the library in the project."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"import { createNotifications } from 'react-native-notificated'\n\nconst { NotificationsProvider } = createNotifications()\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"createNotifications()")," invoked without any configuration, as in the above example, is fairly enough to use the library on its basic level.\nHere is an example of all available parameters that can be adjusted in ",(0,o.yg)("inlineCode",{parentName:"p"},"createNotifications()"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"const { NotificationsProvider } = createNotifications({\n  duration: number // -> default 3000\n  notificationPosition: NotificationPosition\n  animationConfig: CustomAnimationConfig\n  gestureConfig: GestureConfig\n  isNotch?: boolean\n  defaultStylesSettings: {\n    darkMode: false,\n    globalConfig: StyleProps\n    successConfig: StyleProps\n    errorConfig: StyleProps\n    warningConfig: StyleProps\n    infoConfig: StyleProps\n  },\n  variants: CustomVariants\n})\n")),(0,o.yg)("p",null,"Check out ",(0,o.yg)("a",{parentName:"p",href:"https://thewidlarzgroup.github.io/react-native-notificated/docs/api/types#styleprops"},(0,o.yg)("inlineCode",{parentName:"a"},"StyleProps"))),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"defaultStylesSettings")," provides styles for all default notifications. ",(0,o.yg)("inlineCode",{parentName:"p"},"globalConfig")," is on the top of the hierarchy and distributes styles for all types of build-in notifications: success, error, warning, and info. For example, ",(0,o.yg)("inlineCode",{parentName:"p"},"successConfig")," (if provided) will overwrite ",(0,o.yg)("inlineCode",{parentName:"p"},"globalConfig")," styles only for 'success' notifications. ",(0,o.yg)("inlineCode",{parentName:"p"},"successConfig")," styles can be overwritten on the lowest level when calling a 'success' notification using ",(0,o.yg)("inlineCode",{parentName:"p"},"notify()"),". Check out ",(0,o.yg)("a",{parentName:"p",href:"https://thewidlarzgroup.github.io/react-native-notificated/docs/comprehensive-configuration/order-of-settings-overwriting"},(0,o.yg)("inlineCode",{parentName:"a"},"Order of settings overwriting"))," for more details."),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"generateanimationconfig"},(0,o.yg)("inlineCode",{parentName:"h3"},"generateAnimationConfig()")),(0,o.yg)("p",null,"This method allows to set up custom animations."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"generateAnimationConfig(config: CustomAnimationConfig)\n")),(0,o.yg)("p",null,"Check out ",(0,o.yg)("a",{parentName:"p",href:"https://thewidlarzgroup.github.io/react-native-notificated/docs/api/types#customanimationconfig"},(0,o.yg)("inlineCode",{parentName:"a"},"CustomAnimationConfig"))," and ",(0,o.yg)("a",{parentName:"p",href:"https://thewidlarzgroup.github.io/react-native-notificated/docs/animations/custom-transitions"},(0,o.yg)("inlineCode",{parentName:"a"},"Custom transitions"))),(0,o.yg)("p",null,"It takes four properties:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"animationConfigIn")," // -> REQUIRED"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"animationConfigOut")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"transitionInStyles")," // -> REQUIRED"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"transitionOutStyles"))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},'import { generateAnimationConfig } from \'react-native-notificated\'\n\nconst myCustomAnimation = generateAnimationConfig({\n  animationConfigIn: {\n    type: "timing" | "spring",\n    config: WithSpringConfig | WithTimingConfig // -> Reanimated type declarations\n  },\n  animationConfigOut: {\n    type: "timing" | "spring",\n    config: WithSpringConfig | WithTimingConfig // -> Reanimated type declarations\n  },\n  transitionInStyles: (progress: SharedValue<number>) => AnimatedStylesType // -> must be a worklet / Reanimated type declarations\n  transitionOutStyles: (progress: SharedValue<number>) => AnimatedStylesType // -> must be a worklet / Reanimated type declarations\n})\n')),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"modify"},(0,o.yg)("inlineCode",{parentName:"h3"},"modify()")),(0,o.yg)("p",null,"Method returned from ",(0,o.yg)("inlineCode",{parentName:"p"},"useNotifications()")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"useNotificationsController()")," hooks.\nThis method is very similar to notify.\nThe main difference is that you have the opportunity to change the existing notifications."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"modify(id: string, setup: { params: NotificationParams; config?: NotificationConfigParams }): void\n")),(0,o.yg)("p",null,"Jump to ",(0,o.yg)("a",{parentName:"p",href:"https://thewidlarzgroup.github.io/react-native-notificated/docs/api/types#notificationparams"},(0,o.yg)("inlineCode",{parentName:"a"},"NotificationParams"))," and ",(0,o.yg)("a",{parentName:"p",href:"https://thewidlarzgroup.github.io/react-native-notificated/docs/api/types#notificationconfigparams"},(0,o.yg)("inlineCode",{parentName:"a"},"NotificationConfigParams"))),(0,o.yg)("p",null,"The sample code below shows how the method should be implemented:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"import { useNotifications } from 'react-native-notificated'\n\nconst SomeFunctionComponent = () => {\n    const [id, setId] = useState('')\n    const { modify, notify } = useNotifications()\n\n    return (\n      <View>\n        <Button\n          title='launch notification'\n          onPress={() =>\n            setId(\n              notify('success', {\n                params: {\n                  description: 'This is where the toast text goes',\n                  title: 'Success',\n                },\n              }).id\n            )\n          }\n        />\n        <Button\n          title='modify notification'\n          onPress={() =>\n            modify(id, {\n              params: {\n                title: 'Hello',\n                description: 'Wow, that was easy',\n              },\n            })\n          }\n          >\n      </View>\n    )\n}\n")),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"notificationsprovider"},(0,o.yg)("inlineCode",{parentName:"h3"},"NotificationsProvider")),(0,o.yg)("p",null,"A provider, which acts as the notifications root. Depending on where you mount it, this is where the notifications will get rendered in your component tree."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"return (\n  <>\n    <App />\n    <NotificationsProvider />\n  </>\n)\n")),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"notify"},(0,o.yg)("inlineCode",{parentName:"h3"},"notify()")),(0,o.yg)("p",null,"This method is responsible for launching notification (default or custom, if implemented).\nReturned from the ",(0,o.yg)("inlineCode",{parentName:"p"},"useNotifications()")," hook."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"notify(notificationType: string, setup: { params: NotificationParams; config?: NotificationConfigParams }): string\n")),(0,o.yg)("p",null,"Jump to ",(0,o.yg)("a",{parentName:"p",href:"https://thewidlarzgroup.github.io/react-native-notificated/docs/api/types#notificationparams"},(0,o.yg)("inlineCode",{parentName:"a"},"NotificationParams"))," and ",(0,o.yg)("a",{parentName:"p",href:"https://thewidlarzgroup.github.io/react-native-notificated/docs/api/types#notificationconfigparams"},(0,o.yg)("inlineCode",{parentName:"a"},"NotificationConfigParams"))),(0,o.yg)("p",null,"The sample code below shows how it should be implemented:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"import { useNotifications } from 'react-native-notificated'\n\nconst SomeFunctionComponent = () => {\n  const { notify } = useNotifications()\n\n  const notificationMetadata = notify('success', {\n    params: {\n      title: 'Hello',\n      description: 'Wow, that was easy',\n    },\n  })\n}\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"notify()")," returns the notification id.\nThe ID can be later used to manipulate this particular notification (to remove or update content)."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"[...]\n    const notificationID = notify('success', {\n      params: {\n        title: 'Hello',\n        description: 'Wow, that was easy',\n      },\n    }).id\n[...]\n")),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"remove"},(0,o.yg)("inlineCode",{parentName:"h3"},"remove()")),(0,o.yg)("p",null,"This method removes the notification. It is returned from the ",(0,o.yg)("inlineCode",{parentName:"p"},"useNotifications()")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"useNotificationsController()")," hooks."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"remove(id: string): void\n")),(0,o.yg)("p",null,"The sample code below shows how it works:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"import { useNotifications } from 'react-native-notificated'\n\nconst SomeFunctionComponent = () => {\n    const [id, setId] = useState('')\n    const { remove, notify } = useNotifications()\n\n    return (\n      <View>\n        <Button\n          title='launch notification'\n          onPress={() =>\n            setId(\n              notify('success', {\n                params: {\n                  description: 'This is where the toast text goes',\n                  title: 'Success',\n                },\n              }).id\n            )\n          }\n        />\n        <Button\n          title='remove notification'\n          onPress={() => remove(id)}\n          >\n      </View>\n    )\n}\n")),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"usenotifications"},(0,o.yg)("inlineCode",{parentName:"h3"},"useNotifications()")),(0,o.yg)("p",null,"The hook is imported from 'react-native-notificated' and can be used only inside the function component."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"import { useNotifications } from 'react-native-notificated'\n\nconst SomeFunctionComponent = () => {\n    const { notify, modify, remove } = useNotifications()\n\n    [...]\n}\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"useNotifications()")," provides three methods: notify, modify, and remove - described separately."),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"usenotificationscontroller"},(0,o.yg)("inlineCode",{parentName:"h3"},"useNotificationsController()")),(0,o.yg)("p",null,"The hook is imported from 'react-native-notificated' and can be used only inside the function component."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"import { useNotificationsController } from 'react-native-notificated'\n\nconst SomeFunctionComponent = () => {\n    const { modify, remove } = useNotificationsController()\n\n    [...]\n}\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"useNotificationsController()")," provides two methods: modify and remove - described separately."),(0,o.yg)("hr",null))}g.isMDXComponent=!0}}]);